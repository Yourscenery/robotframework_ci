*** Settings ***
Resource          ../9ShareResource.txt

*** Variables ***
${brightTableName}    t_bright    # 数据库中灯具的表名
##bright apikey and dbkey接口请求参数=数据库字段名，用户接口内容与数据库内容断言
&{bright apikey and dbkey}    projectid=projectid    areaid=areaid    alias=ALIAS    nodeId=NODE_ID    longitude=LONGITUDE    latitude=LATITUDE    platformId=PLATFORM_ID
...               protocolType=PROTOCOL_TYPE    deviceType=DEVICE_TYPE    model=MODEL    manufacturerId=MANUFACTURER_ID    remarks=remarks    onenetId=onenet_id    verifyCode=VERIFY_CODE
...               id=DEVICE_ID
${ADD_BRIGHT_SUCCESS}    ${True}
${PAGE_BRIGHT_SUCCESS}    成功
${UPDATE_BRIGHT_SUCCESS}    编辑成功
${DELETE_BRIGHT_SUCCESS}    删除成功

*** Keywords ***
bright_edit_add
    [Arguments]    ${dicParams}    ${success}=${ADD_BRIGHT_SUCCESS}    ${returnKey}=object
    ${url}    set variable    /bright/iotlight/nb/add
    ${dicAssert}    create dictionary    success=${success}
    ${returnValue}    http_post_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    ${bIn}=    evaluate    '.' in '${returnKey}'
    ${brightId}    set variable if    ${bIn}==${false}    ${returnValue}[nodeId]    ${returnValue}
    run keyword if    '${brightId}'!='${none}' and '${success}'=='${ADD_BRIGHT_SUCCESS}'    set suite variable    ${S_ADD_BRIGHT_ID}    ${brightId}
    #数据库断言--获取每列的值拼接作为where语句
    ${tableFromWhere}    set variable    ${brightTableName} WHERE ALIAS='${dicParams}[alias]' and NODE_ID='${dicParams}[nodeId]'
    run keyword if    '${brightId}'!='${none}' and '${success}'=='${ADD_BRIGHT_SUCCESS}'    assert_response_database_add_or_update    ${bright apikey and dbkey}    ${dicParams}    ${tableFromWhere}
    ...    ELSE    log    ***pass【没新增成功不走数据库断言】***
    [Return]    ${brightId}

bright_edit_add_oneData_485
    [Arguments]    ${mark}=a
    [Documentation]    固定数据新增一条灯具数据，用于更新、删除接口使用
    log    ---新增一条灯具数据并获取其id---
    ${time}=    get_time_no_year
    ${dicParams}    create dictionary    projectid=${G_PROJECT_ID}    areaid=${G_AREA_ID}    alias=o485${mark}灯${time}    nodeId=${time}    longitude=1.0
    ...    latitude=1.0    platformId=66    protocolType=Default    deviceType=Default    model=Default    manufacturerId=Default
    ...    remarks=${mark}${time}    onenetId=${time}    verifyCode=${time}
    ${brightId}=    bright_edit_add    ${dicParams}
    [Return]    ${brightId}

bright_edit_add_oneData_nb
    [Arguments]    ${mark}=a
    [Documentation]    固定数据新增一条灯具数据，用于更新、删除接口使用
    log    ---新增一条灯具数据并获取其id---
    ${time}=    get_time_no_year
    ${dicParams}    create dictionary    projectid=${G_PROJECT_ID}    areaid=${G_AREA_ID}    alias=o${mark}灯${time}    nodeId=${time}    longitude=1.0
    ...    latitude=1.0    platformId=fonda_official    protocolType=CoAP    deviceType=LightLcu    model=lcu51nbYn    manufacturerId=Fonda
    ...    remarks=${mark}${time}    onenetId=${null}    verifyCode=${time}
    ${brightId}=    bright_edit_add    ${dicParams}
    [Return]    ${brightId}

bright_edit_query
    [Arguments]    ${dicParams}    ${total}=0    ${returnKey}=records
    ${url}    set variable    /bright/bright/query
    ${dicAssert}    create dictionary    total=${total}
    ${respKeyVal}    http_post_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    ${lenRespKeyVal}    get length    ${respKeyVal}
    #获取第一行数据id
    ${brightId}=    run keyword if    ${lenRespKeyVal}>0    set variable    ${respKeyVal}[0][id]
    ...    ELSE    set variable    ${None}
    #数据库断言------获取每列的值拼接作为where语句
    #${tableWhereStatement}    set variable    id in (${brightId})
    run keyword if    ${lenRespKeyVal}>0    assert_response_database_query    ${bright apikey and dbkey}    ${respKeyVal}    ${brightTableName}    id
    ...    ELSE    log    ***pass【没查询数据不走数据库断言】***
    [Return]    ${brightId}

bright_edit_pageCondition
    [Arguments]    ${dicParams}    ${message}=${PAGE_BRIGHT_SUCCESS}    ${returnKey}=object.records
    ${url}    set variable    /bright/bright/page-condition
    ${dicAssert}    create dictionary    message=${message}
    ${respKeyVal}    http_get_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    ${lenRespKeyVal}    get length    ${respKeyVal}
    #获取第一行数据id
    ${brightId}=    run keyword if    ${lenRespKeyVal}>0    set variable    ${respKeyVal}[0][id]
    ...    ELSE    set variable    ${None}    #数据库断言------获取每列的值拼接作为where语句    #${tableWhereStatement}    set variable
    ...    # id in (${brightId})    #run keyword if    ${lenRespKeyVal}>0    assert_response_database_query    ${bright apikey and dbkey}    ${respKeyVal}
    ...    # ${brightTableName}    id    # ELSE    log    ***pass【没查询数据不走数据库断言】***
    [Return]    ${brightId}

bright_edit_update
    [Arguments]    ${dicParams}    ${message}=${UPDATE_BRIGHT_SUCCESS}    ${returnKey}=object.id
    ${url}    set variable    /bright/bright/update
    ${dicAssert}    create dictionary    message=${message}
    ${brightId}    http_post_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    #数据库断言--获取每列的值拼接作为where语句
    ${tableFromWhere}    Set Variable If    '${brightId}'!='${none}' and '${message}'=='${UPDATE_BRIGHT_SUCCESS}'    ${brightTableName} WHERE id='${brightId}' and area_id='${dicParams}[areaId]' and device_name='${dicParams}[deviceName]' and device_number='${dicParams}[deviceNumber]'
    run keyword if    '${brightId}'!='${none}' and '${message}'=='${UPDATE_BRIGHT_SUCCESS}'    assert_response_database_add_or_update    ${bright apikey and dbkey}    ${dicParams}    ${tableFromWhere}
    ...    ELSE    log    ***pass【没更新成功不走数据库断言】***
    [Return]    ${brightId}

bright_edit_delete
    [Arguments]    ${dicParams}    ${message}=${DELETE_BRIGHT_SUCCESS}
    ${url}    set variable    /bright/bright/delete
    ${dicAssert}    create dictionary    message=${message}
    http_post    ${url}    ${dicParams}    ${dicAssert}
    #数据库断言
    ${ids}    get from dictionary    ${dicParams}    ids[]
    #tableSelectFrom，作为select 的查询字段；
    ${tableSelectFrom}    set variable    select id,deleted from ${brightTableName}
    run keyword if    '${ids}'!='${none}' and '${message}'=='${DELETE_BRIGHT_SUCCESS}'    assert_response_database_delete    ${tableSelectFrom}    id    ${ids}
    ...    ELSE    log    ***pass【没删除成功不走数据库断言】***

bright_overview_status_num
    [Arguments]    ${success}=True    ${returnKey}=object
    [Documentation]    设备总览-灯具设备在离线统计
    ${url}    set variable    /bright/bright/statusNum
    ${dicAssert}    create dictionary    success=${success}
    ${respKeyVal}    http_post_return    ${url}    ${none}    ${dicAssert}    ${returnKey}
    log    ***${respKeyVal}[onlineNum]在线；${respKeyVal}[offlineNum]离线；
    [Return]    ${respKeyVal}

bright_overview_getBrightListByLighting
    [Arguments]    ${dicParams}    ${total}=0    ${returnKey}=records
    [Documentation]    设备总览-灯具列表 deviceAlias=3&size=10current=2
    ${url}    set variable    /lighting/lighting/getBrightListByLighting
    ${dicAssert}    create dictionary    total=${total}
    ${respKeyVal}    http_post_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    ${lenRespKeyVal}    get length    ${respKeyVal}
    #获取第一行数据id
    ${brightId}=    run keyword if    ${lenRespKeyVal}>0    set variable    ${respKeyVal}[0][id]
    ...    ELSE    set variable    ${None}
    [Return]    ${brightId}

bright_overview_status
    [Arguments]    ${dicParams}    ${success}=True    ${returnKey}=object
    [Documentation]    设备总览-灯具设备-查询ids[]: 0884a4366bd799a33671611c015e3bd0,
    ${url}    set variable    /bright/bright/status
    ${dicAssert}    create dictionary    success=${success}
    ${respKeyVal}    http_post_return    ${url}    ${dicParams}    ${dicAssert}    ${returnKey}
    [Return]    ${respKeyVal}
