*** Settings ***
Resource          ../9ShareResource.txt

*** Keywords ***
assert_response_database_delete
    [Arguments]    ${tableSelectFrom}    ${tableWhereColumnName}=id    ${ids}=${none}
    [Documentation]    判断接口操作的结果是否正确修改数据库数据；
    ...    删除：硬删除--数据库是否存在；软删除--数据库里字段属性修改是否正确；
    ...    控制：；
    ...    对比格式：[(1, 'xxxxx'), (1, 'xxxxx')]
    ...      转换两个列表|元祖成一个字典   a = ('a4','a22','a33','a4')     b = ('b33','b2','b11')    d = zip(a,b)    print(dict(d)) 
    log    *d*d*${tableSelectFrom}---${tableWhereColumnName}---${ids}
    run keyword if    '${ids}'=='${none}' and '${tableWhereColumnName}'=='${none}' and '${tableSelectFrom}'=='${none}'    fail    删除sql表达式存在none值
    #获取每列的值拼接作为where语句
    ${whereValue}    convert to string    ${ids}
    ${whereValue}    replace string    ${whereValue}    ,    ","
    ${sqlScript}    set variable    ${tableSelectFrom} where ${tableWhereColumnName} in ("${whereValue}")
    ${db_result_data}=    db_open_query_close    ${sqlScript}
    ${db_result_data}    convert to string    ${db_result_data}
    ${case_data}    create list    #数据库使用in命令查找结果，数据是排序后返回的，排序规则是现在通过sort list解决，但是准确性不高
    ${listIds}    split string    ${ids}    ,
    : FOR    ${id}    IN    @{listIds}
    \    append to list    ${case_data}    ('${id}', 1)    #1删除状态
    ${case_data}    convert to string    ${case_data}
    ${case_data}    remove string    ${case_data}    "
    log    case_data${case_data}
    log    db_result_data${db_result_data}
    should be equal    ${case_data}    ${db_result_data}    msg=case_data不等于db_result_data
    log    ***pass【接口操作的结果等于数据库数据】***

assert_response_database_query
    [Arguments]    ${apikey and dbkey}    ${respKeyVal}    ${tableName}    ${tableWhereColumnName}=id
    [Documentation]    判断接口操作的结果是否等于数据库数据；
    ...    查找：比较接口部分应答值与数据库查找值；
    ...    对比格式： [(xxx, xxxx), (xxx, xxxx)]
    ...    paramsValue的key要等于columnName，顺序、数量
    ...    state(0:未登入、1:不在线、2:在线、3：监控点类型),deleted (0:未删除，1：已删除）
     ...      转换两个列表|元祖成一个字典   a = ('a4','a22','a33','a4')     b = ('b33','b2','b11')    d = zip(a,b)    print(dict(d)) 
   log    *q*q*${apikey and dbkey}--${respKeyVal}--${tableName}
    #顺序不对；单引号不对；括号不对；value字段之间有空格；db_data各id之间有空格
    @{apikeys}    get dictionary keys    ${apikey and dbkey}    sort_keys=False
    ${case_data}    create list
    : FOR    ${i}    ${item}    IN ENUMERATE    @{respKeyVal}
    \    ${paramsValue}=    assert_query_for_get_respItem_value    ${item}    ${apikeys}
    \    append to list    ${case_data}    (${paramsValue})
    \    #获取每列的id值拼接，作为where语句
    \    ${id}    set variable if    '${i}'=='0'    '${item}[id]'    ${id},'${item}[id]'
    #tableColumnName，作为select 的查询字段；
    @{apivalues}    get dictionary values    ${apikey and dbkey}    sort_keys=False
    : FOR    ${i}    ${item}    IN ENUMERATE    @{apivalues}
    \    ${tableColumnName}    set variable if    '${i}'=='0'    ${item}    ${tableColumnName}, ${item}
    #获取每列的值拼接作为where语句
    ${tableWhereStatement}    set variable    ${tableWhereColumnName} in (${id})
    ${sqlScript}    set variable    SELECT ${tableColumnName} FROM ${tableName} where ${tableWhereStatement}
    ${bIdBeNone}    Diy Judge Two Val Are Equal    ${id}    ${none}    msg=【id】等于【none】不执行assert_response_database_query    #判断id是否为none
    run keyword if    ${bIdBeNone}!=${false}    fail    【${bIdBeNone}等于${false}】
    ${db_result_data}=    db_open_query_close    ${sqlScript}
    ${db_result_data}    convert to string    ${db_result_data}
    ${db_result_data}    remove string    ${db_result_data}    '
    #case_data与db_result_data的排序顺序要一致
    sort list    ${case_data}
    ${case_data}    convert to string    ${case_data}
    ${case_data}    remove string    ${case_data}    '
    log    case_data${case_data}
    log    db_result_data${db_result_data}
    should be equal    ${case_data}    ${db_result_data}    msg=case_data不等于db_result_data
    log    ***pass【接口操作的结果等于数据库数据】***

assert_response_database_add_or_update
    [Arguments]    ${apikey and dbkey}    ${dicParams}    ${tableFromWhere}
    [Documentation]    判断接口操作的结果是否正确修改数据库数据；
    ...    新增：不管接口有无返回值--比较新增内容与数据库查找值
    ...    更新：同新增；
    ...    对比格式：(xxxxx, xx, 123456)
    ...    取dicParams的key值等于tableColumnName，顺序、数量
    ...    	${db_result_data} = [('210d53447e14e6bb5fba1483549743db', '19bff81796d339965f50334bd746501a', 'as摄0324103154', '0324103154', '2.2.2.9', '222', 'admin', '123456', 'add0324103154')]
    ...      转换两个列表|元祖成一个字典   a = ('a4','a22','a33','a4')     b = ('b33','b2','b11')    d = zip(a,b)    print(dict(d)) 
    log    *a*a*${apikey and dbkey}---${dicParams}---${tableFromWhere}
    @{apikeys}    get dictionary keys    ${apikey and dbkey}    sort_keys=False
    #tableColumnName，作为select 的查询字段；
    : FOR    ${i}    ${item}    IN ENUMERATE    @{apikeys}
    \    Continue For Loop If    '${item}'=='id' or '${item}'=='lightingid'    #跳过dicParams中没有的字段
    \    ${tableColumnName}    set variable if    '${i}'=='0'    ${apikey and dbkey}[${item}]    ${tableColumnName}, ${apikey and dbkey}[${item}]
    \    ${case_data}    set variable if    '${i}'=='0'    ${dicParams}[${item}]    ${case_data}, ${dicParams}[${item}]
    ${case_data}    set variable    (${case_data})
    ${sqlScript}    set variable    SELECT ${tableColumnName} FROM ${tableFromWhere}
    ${db_result_data}=    db_open_query_close    ${sqlScript}
    ${db_result_data}    convert to string    ${db_result_data}
    ${db_result_data}    remove string    ${db_result_data}    [    ]    '
    ${case_data}    convert to string    ${case_data}
    log    case_data${case_data}
    log    db_result_data${db_result_data}
    should contain    ${case_data}    ${db_result_data}    msg=case_data不等于db_result_data
    log    ***pass【接口操作的结果等于数据库数据】***

assert_query_for_get_respItem_value
    [Arguments]    ${respItem}    ${apikey}
    : FOR    ${i}    ${item}    IN ENUMERATE    @{apikey}
    \    ${paramsValue}    set variable if    '${i}'=='0'    ${respItem}[${item}]    ${paramsValue}, ${respItem}[${item}]
    [Return]    ${paramsValue}
